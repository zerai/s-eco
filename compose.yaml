
services:
  app:
    image: ${IMAGES_PREFIX:-}app-php
    profiles: [ default, all ]
    restart: unless-stopped
    build:
      context: ./_etc/docker/php-cli
      dockerfile: Dockerfile
    depends_on:
      database:
        condition: service_healthy
        restart: false
      mbroker:
        condition: service_started
        restart: false
    ports:
      # HTTP
      - target: 80
        published: ${HTTP_PORT:-80}
        protocol: tcp
      # HTTPS
      - target: 443
        published: ${HTTPS_PORT:-443}
        protocol: tcp
    volumes:
      - "./api:/app"
    environment:
      APP_ENV: "dev"
      APP_DEBUG: "true"
      APP_RUNTIME: "Luzrain\\WorkermanBundle\\Runtime"
      DATABASE_URL: pgsql://${POSTGRES_USER:-app}:${POSTGRES_PASSWORD:-!ChangeMe!}@database:5432/app?serverVersion=16&charset=utf8
      ENQUEUE_DSN: amqp://rabbit-user:rabbit-password@mbroker:5672/%2f
    command: "php public/index.php start"

  ###> doctrine/doctrine-bundle ###
  database:
    profiles: [ default, postgres, all ]
    image: postgres:${POSTGRES_VERSION:-16}-alpine
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-app}
      # You should definitely change the password in production
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-!ChangeMe!}
      POSTGRES_USER: ${POSTGRES_USER:-app}
    volumes:
      - database_data:/var/lib/postgresql/data:rw
      # You may use a bind-mounted host directory instead, so that it is harder to accidentally remove the volume and lose all your data!
      # - ./docker/db/data:/var/lib/postgresql/data:rw
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-app} -d ${POSTGRES_DB:-postgres}" ]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s
###< doctrine/doctrine-bundle ###

  pwa:
    image: node:${NODE_VERSION:-20}-alpine
    profiles: [ default, pwa, all ]
    user: "node"
    depends_on:
      app:
        condition: service_started
        restart: false

    working_dir: /home/node/app
    volumes:
      - ./pwa/s-eco:/home/node/app
    environment:
      VITE_BACKEND_API: http://app:80
      # Development usage only
      NODE_TLS_REJECT_UNAUTHORIZED: "0"
    expose:
      - "5173"
    ports:
      - "5173:5173"
    command: ["npm", "run", "dev", "--", "--host", "0.0.0.0"]


  #########################################################################################################################
  #########################################################################################################################
  ##
  ##   infra services
  ##
  #########################################################################################################################
  #########################################################################################################################

  ######################################################################################################################
  #
  #   Messaging & queue - RabbitMq
  #
  ######################################################################################################################
  mbroker:
    profiles: [ default, rabbitmq, all ]
    image: rabbitmq:3-management
    environment:
      RABBITMQ_ERLANG_COOKIE: "SWQOKODSQALRPCLNMEQG"
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER:-rabbit-user}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS:-rabbit-password}
      RABBITMQ_DEFAULT_VHOST: "/"

  ######################################################################################################################
  #
  #   Database UI - PgAdmin
  #
  ######################################################################################################################
  pgadmin:
    profiles: [ postgres-ui, all ]
    image: dpage/pgadmin4:latest
    ports:
      - "8181:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: "admin@example.com"
      PGADMIN_DEFAULT_PASSWORD: "admin"
      PGADMIN_CONFIG_SERVER_MODE: "False"
      PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED: "False"
    volumes:
      - ./_etc/docker/pgAdmin/servers.json:/pgadmin4/servers.json


volumes:
###> doctrine/doctrine-bundle ###
  database_data:
###< doctrine/doctrine-bundle ###
