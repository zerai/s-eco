name: Commit stage

on:
  workflow_call:
    # Map the workflow outputs to job outputs
    inputs:
      triggering-sha:
        required: true
        type: string

defaults:
  run:
    shell: bash
    working-directory: api
    
env:
  # PHP SETTINGS
  PHP_EXTENSIONS: json
  PHP_EXTENSIONS_CACHE_KEY: cache-php-extensions-v1

jobs:
  commit-checks:
    name: Commit checks
    runs-on: ubuntu-22.04
    timeout-minutes: 10
    strategy:
      matrix:
        php:
          - '8.1'
      fail-fast: false
    steps:
      - name: Checkout on SHA-${{ inputs.triggering-sha }}
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.triggering-sha }}

      - name: Setup php extension cache environment
        if: ${{ vars.USE_PHP_EXTENSION_CACHE }}
        id: cache-php-extensions
        uses: shivammathur/cache-extensions@v1
        with:
          php-version: ${{ matrix.php }}
          extensions: ${{ env.PHP_EXTENSIONS }}
          key: ${{ env.PHP_EXTENSIONS_CACHE_KEY }}

      - name: Cache PHP extensions
        if: ${{ vars.USE_PHP_EXTENSION_CACHE }}
        uses: actions/cache@v4
        with:
          path: ${{ steps.cache-php-extensions.outputs.dir }}
          key: ${{ steps.cache-php-extensions.outputs.key }}
          restore-keys: ${{ steps.cache-php-extensions.outputs.key }}

      - name: Setup PHP
        uses: shivammathur/setup-php@2.31.1
        with:
          php-version: ${{ matrix.php }}
          extensions: ${{ env.PHP_EXTENSIONS }}
          ini-values: memory_limit=-1
          coverage: none
          tools: composer, composer-normalize:2.16.0

      - name: Set Composer Cache Directory
        if: ${{ vars.USE_COMPOSER_CACHE }}
        id: composer-cache
        run: |
          echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

      - name: Cache Composer dependencies
        uses: actions/cache@v4
        if: ${{ vars.USE_COMPOSER_CACHE }}
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-php-${{ matrix.php }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-php-${{ matrix.php }}-composer-

      - name: Install Composer dependencies
        run: |
          composer install --prefer-dist --no-scripts --ansi

      - name: Run composer validate
        run: |
          composer validate --strict --ansi

      - name: Run composer normalize
        if: always()
        run: |
          composer-normalize --dry-run --ansi

      - name: Run composer audit
        if: always()
        run: |
          composer audit --ansi

      - name: Run ecs CODING STANDARDS checks
        if: always()
        run: |
          composer bin ecs install
          ./vendor/bin/ecs --ansi
#
#      - name: Run psalm STATIC ANALYSIS
#        if: always()
#        run: |
#          ./bin/console lint:container -e dev --ansi
#          ./vendor/bin/psalm
#
#      - name: Run rector MAINTENANCE
#        if: always()
#        run: |
#          ./vendor/bin/rector process --dry-run --ansi
#
#      - name: Run PhpArkitect
#        if: always()
#        run: |
#          ./vendor/bin/phparkitect check --ansi

      #
      # Additional checks, they are pre-condition before
      # 'acceptance stage' phase of the CI
      #

      - name: Run yml linter on configurations files
        run: |
          ./bin/console lint:yaml config/ --ansi

      - name: Run linter on symfony containers (prod|dev)
        run: |
          ./bin/console lint:container -e prod --ansi
          ./bin/console lint:container -e dev --ansi

      - name: Run linter on all twig templates
        run: |
          ./bin/console lint:twig --ansi
        env:
          APP_ENV: dev



  unit-test:
      name: Unit tests (php-${{ matrix.php }})
      runs-on: ubuntu-22.04
      timeout-minutes: 10
      continue-on-error: ${{ matrix.is-php-experimental }}
      strategy:
          max-parallel: 5
          matrix:
              php:
                  - '8.1'
              is-php-experimental: [false]
              generate-coverage-report: [false]
              include:
                - php: '8.2'
                  is-php-experimental: false
                  generate-coverage-report: false
                - php: '8.3'
                  is-php-experimental: false
                  generate-coverage-report: false
                - php: '8.4'
                  is-php-experimental: false
                  generate-coverage-report: false
          fail-fast: true
      steps:
          - name: Checkout on SHA-${{ inputs.triggering-sha }}
            uses: actions/checkout@v4
            with:
                ref: ${{ inputs.triggering-sha }}

          - name: Setup php extension cache environment
            if: ${{ vars.USE_PHP_EXTENSION_CACHE }}
            id: cache-php-extensions
            uses: shivammathur/cache-extensions@v1
            with:
                php-version: ${{ matrix.php }}
                extensions: ${{ env.PHP_EXTENSIONS }}
                key: ${{ env.PHP_EXTENSIONS_CACHE_KEY }}-${{ matrix.php }}

          - name: Cache PHP extensions
            if: ${{ vars.USE_PHP_EXTENSION_CACHE }}
            uses: actions/cache@v4
            with:
                path: ${{ steps.cache-php-extensions.outputs.dir }}
                key: ${{ steps.cache-php-extensions.outputs.key }}
                restore-keys: ${{ steps.cache-php-extensions.outputs.key }}

          - name: Setup PHP
            uses: shivammathur/setup-php@2.31.1
            with:
                php-version: ${{ matrix.php }}
                extensions: ${{ env.PHP_EXTENSIONS }}
                ini-values: memory_limit=-1
                coverage: xdebug

          - name: Set Composer Cache Directory
            if: ${{ vars.USE_COMPOSER_CACHE }}
            id: composer-cache
            run: |
                echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

          - name: Cache Composer dependencies
            uses: actions/cache@v4
            if: ${{ vars.USE_COMPOSER_CACHE }}
            with:
                path: ${{ steps.composer-cache.outputs.dir }}
                key: ${{ runner.os }}-php-${{ matrix.php }}-composer-${{ hashFiles('**/composer.lock') }}
                restore-keys: |
                    ${{ runner.os }}-php-${{ matrix.php }}-composer-

          - name: Install dependencies
            run: |
                composer install --prefer-dist --ansi

          - name: Run unit tests
            if: ${{ !matrix.generate-coverage-report }}
            run: |
                vendor/bin/phpunit --testsuite=unit --testdox --colors=always

          - name: Run unit tests WITH COVERAGE
            if: ${{ matrix.generate-coverage-report }}
            run: |
                vendor/bin/phpunit --testsuite=unit --testdox --colors=always \
                --coverage-clover ${{ vars.UNIT_TEST_CLOVER_FILENAME }} \
                --testdox-text ${{ vars.UNIT_TEST_DOC_FILENAME }}

          - name: Get Coverage artifact name
            if: ${{ matrix.generate-coverage-report }}
            id: coverage-artifact-name
            run: echo "name=${{ vars.ARTIFATC_NAME_FOR_UNIT_TESTS_COVERAGE }}-$GITHUB_SHA" >> $GITHUB_OUTPUT

          - name: Save coverage reports
            if: ${{ matrix.generate-coverage-report }}
            uses: actions/upload-artifact@v4
            with:
                name: ${{ steps.coverage-artifact-name.outputs.name }}
                path: ${{ vars.UNIT_TEST_CLOVER_FILENAME }}

          - name: Get Test doc artifact name
            if: ${{ matrix.generate-coverage-report }}
            id: test-doc-artifact-name
            run: echo "name=${{ vars.ARTIFATC_NAME_FOR_UNIT_TESTS_DOCUMENTATION_REPORT }}-$GITHUB_SHA" >> $GITHUB_OUTPUT

          - name: Save test doc reports
            if: ${{ matrix.generate-coverage-report }}
            uses: actions/upload-artifact@v4
            with:
                name: ${{ steps.test-doc-artifact-name.outputs.name }}
                path: ${{ vars.UNIT_TEST_DOC_FILENAME }}


